name: Build Native WebView Libraries

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 0'

env:
  CMAKE_CONFIG: >-
    -D WEBVIEW_BUILD_SHARED_LIBRARY=ON
    -D WEBVIEW_BUILD_STATIC_LIBRARY=OFF
    -D WEBVIEW_BUILD_TESTS=OFF
    -D WEBVIEW_BUILD_EXAMPLES=OFF
    -D WEBVIEW_BUILD_DOCS=OFF
    -D WEBVIEW_ENABLE_PACKAGING=OFF
    -D WEBVIEW_ENABLE_CHECKS=OFF

defaults:
  run:
    shell: bash

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check.outputs.tag }}
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Check if tag already built
        id: check
        run: |
          tag=$(curl -s https://api.github.com/repos/webview/webview/tags | jq -r '.[0].name')
          echo "tag=$tag" >> $GITHUB_OUTPUT

          if [ -f embedded/VERSION.txt ] && grep -q "$tag" embedded/VERSION.txt; then
            echo "Already built version $tag"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: ${{ matrix.job.os }}-${{ matrix.job.arch }}
    needs: prepare
    if: needs.prepare.outputs.skip != 'true'
    runs-on: ${{ matrix.job.runs-on }}
    strategy:
      matrix:
        job:
          - os: linux
            arch: amd64
            runs-on: ubuntu-latest
            file: libwebview.so
          - os: linux
            arch: arm64
            runs-on: ubuntu-24.04-arm
            file: libwebview.so
          - os: macos
            arch: amd64
            runs-on: macos-latest
            file: libwebview.dylib
          - os: macos
            arch: arm64
            runs-on: macos-latest
            file: libwebview.dylib
            args: -D CMAKE_OSX_ARCHITECTURES=arm64
          - os: windows
            arch: amd64
            runs-on: windows-latest
            file: Release/webview.dll
          - os: windows
            arch: arm64
            runs-on: windows-latest
            file: Release/webview.dll
            args: -A ARM64
    steps:
      - uses: actions/checkout@v4
        with:
          repository: webview/webview
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Install dependencies
        if: matrix.job.os == 'linux'
        run: |
          sudo apt-get update 
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Configure and Build
        run: |
          cmake -B build -S . -D CMAKE_BUILD_TYPE=Release ${{ matrix.job.args }} \
            -D WEBVIEW_BUILD_SHARED_LIBRARY=ON \
            -D WEBVIEW_BUILD_STATIC_LIBRARY=OFF \
            -D WEBVIEW_BUILD_TESTS=OFF \
            -D WEBVIEW_BUILD_EXAMPLES=OFF \
            -D WEBVIEW_BUILD_DOCS=OFF \
            -D WEBVIEW_ENABLE_PACKAGING=OFF \
            -D WEBVIEW_ENABLE_CHECKS=OFF
          cmake --build build --config Release

      - name: Rename artifact
        run: |
          mkdir -p ${{ matrix.job.os }}_${{ matrix.job.arch }}
          cp build/core/${{ matrix.job.file }} ${{ matrix.job.os }}_${{ matrix.job.arch }}/

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.os }}_${{ matrix.job.arch }}
          path: ${{ matrix.job.os }}_${{ matrix.job.arch }}/${{ matrix.job.file }}

  # linux-amd64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev

  #     - name: Configure and Build (Linux AMD64)
  #       run: |
  #         cmake -B build -S . -D CMAKE_BUILD_TYPE=Release ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/libwebview.so webview_linux_amd64.so

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_linux_amd64.so
  #         path: webview_linux_amd64.so

  # linux-arm64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: ubuntu-24.04-arm
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64

  #     - name: Configure and Build (Linux ARM64)
  #       run: |
  #         cmake -B build -S . -D CMAKE_BUILD_TYPE=Release ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/libwebview.so webview_linux_arm64.so

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_linux_arm64.so
  #         path: webview_linux_arm64.so

  # macos-amd64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Configure and Build (macOS AMD64)
  #       run: |
  #         cmake -B build -S . -D CMAKE_BUILD_TYPE=Release ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/libwebview.dylib webview_darwin_amd64.dylib

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_darwin_amd64.dylib
  #         path: webview_darwin_amd64.dylib

  # macos-arm64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Configure and Build (macOS ARM64)
  #       run: |
  #         cmake -B build -S . -D CMAKE_BUILD_TYPE=Release -D CMAKE_OSX_ARCHITECTURES=arm64 ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/libwebview.dylib webview_darwin_arm64.dylib

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_darwin_arm64.dylib
  #         path: webview_darwin_arm64.dylib

  # windows-amd64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Configure and Build (Windows AMD64)
  #       run: |
  #         cmake -B build -S . -A x64 -D CMAKE_BUILD_TYPE=Release ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/Release/webview.dll webview_windows_amd64.dll

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_windows_amd64.dll
  #         path: webview_windows_amd64.dll

  # windows-arm64:
  #   needs: prepare
  #   if: needs.prepare.outputs.skip != 'true'
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: webview/webview
  #         ref: ${{ needs.prepare.outputs.tag }}

  #     - name: Configure and Build (Windows ARM64)
  #       run: |
  #         cmake -B build -S . -A ARM64 -D CMAKE_BUILD_TYPE=Release ${{ env.CMAKE_CONFIG }}
  #         cmake --build build --config Release

  #     - name: Rename artifact
  #       run: cp build/core/Release/webview.dll webview_windows_arm64.dll

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webview_windows_arm64.dll
  #         path: webview_windows_arm64.dll

  finalize:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
      # - linux-amd64
      # - linux-arm64
      # - macos-amd64
      # - macos-arm64
      # - windows-amd64
      # - windows-arm64
    if: needs.prepare.outputs.skip != 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: embedded

      - name: Create version file
        run: echo "${{ needs.prepare.outputs.tag }}" > embedded/VERSION.txt

      - name: Commit and create PR
        uses: peter-evans/create-pull-request@v7
        with:
          branch: update-webview
          sign-commits: true
          commit-message: 'feat: update webview to ${{ steps.compare.outputs.tag }}'
          title: 'feat: update webview to ${{ steps.compare.outputs.tag }}'
          body: This PR updates the embedded WebView native libraries to version ${{ needs.prepare.outputs.tag }}.
          delete-branch: true
